<!DOCTYPE html>
<html>
<head>
  <title>Spotify Web Playback SDK Quick Start Tutorial</title>
</head>
<body>


  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  <script
  src="https://code.jquery.com/jquery-3.2.1.min.js"
  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
  crossorigin="anonymous"></script>
  <script>
    var newPlayer; 
    var currentState;
    var deviceId;
    var songHasEnded

    window.onSpotifyWebPlaybackSDKReady = () => {
      const token = '<%= @accessToken %>';
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token); }
      });

      // Error handling
      player.addListener('initialization_error', ({ message }) => { console.error(message); });
      player.addListener('authentication_error', ({ message }) => { console.error(message); });
      player.addListener('account_error', ({ message }) => { console.error(message); });
      player.addListener('playback_error', ({ message }) => { console.error(message); });

      // Playback status updates
      // player.addListener('player_state_changed', state => { 


      //});

      //Song has song ended
      player.addListener('player_state_changed', (state) => {
        console.log(state);
        if (
          this.state
          && state.track_window.previous_tracks.find(x => x.id === state.track_window.current_track.id)
          && !this.state.paused
          && state.paused
          ) {
          songHasEnded = 1
          console.log('Track ended');
          setTimeout(function(){  }, 3000);
          //this.setTrackEnd(true);
          <% @trackId = fetchNewSong() %>
          $.ajax({
            url: "https://api.spotify.com/v1/me/player/play?device_id=" + deviceId,
            type: "PUT",
            data: '{"uris": ["spotify:track:<%= @trackId %>"]}',
            beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + '<%= @accessToken %>' );},
            success: function(data) { 
              console.log(data)
            }
          });

        }
        this.state = state;
        console.log('track has not ended')
        songHasEnded = 0
      });

      // Ready
      player.addListener('ready', ({ device_id }) => {
        deviceId = device_id
        console.log('Ready with Device ID', device_id);
      });

      // Not Ready
      player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
      });

      // Connect to the player!
      player.connect();
      player.getCurrentState().then(state => {
        if (!state) {
          console.error('User is not playing music through the Web Playback SDK');
          return;
        }
      });

      newPlayer = player
    };

    function togglePlay() {
        console.log(currentState)

          newPlayer.getCurrentState().then(state => {
            console.log(state)
            if (!state) {
              $.ajax({
                url: "https://api.spotify.com/v1/me/player/play?device_id=" + deviceId,
                type: "PUT",
                data: '{"uris": ["spotify:track:6Usab30ub0EPCV6KdkBXuw"]}',
                beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + '<%= @accessToken %>' );},
                success: function(data) { 
                  console.log(data)
                }
              });
            } else {
              newPlayer.togglePlay()
            }

          });

          
        }

  </script>


  <button type="button" onclick="togglePlay()"> play/pause </button>

</body>
</html>