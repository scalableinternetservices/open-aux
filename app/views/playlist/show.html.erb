<html>
    <body>
        <% if logged_in? %>
            <nav class="navbar navbar-light bg-light">
            <a class="navbar-brand">OpenAUX</a>
            <a href="/logout" class="button">Logout</a>
            </nav>
        <% else %>
            <nav class="navbar navbar-light bg-light">
            <a class="navbar-brand">OpenAUX</a>
            <form class="form-inline">
                <a href="/login" class="button">Login</a>
            </form>
            </nav>
        <% end %>
    
        <div class="dashboard-wrapper">
            <div class="row">
                <div class="col-md-6 col-md-offset-3">
                    <% if logged_in? %>
                        <div class="go-back-playlist">
                            <%= link_to "Go Back to Playlists", "/playlist", :class => "btn btn-info" %>
                        </div>
                    <% else %>
                        <div class="go-back-playlist">
                            <%= link_to "Go Back to Homepage", "/", :class => "btn btn-info" %>
                        </div>
                    <% end %>
                    <h1>Playlist Name: <%= @playlist.name %></h1>
                    <p>Playlist Key: <%= @key %></p>
                    <button type="button" onclick="togglePlay()"> play/pause </button>
                    <div class="search-queue">
                        <%= form_tag "/dashboard", :method => "get" do %>
                            <%= text_field_tag :search, params[:search] %>
                            <%= submit_tag "Search" %>
                        <% end %>
                    </div><br>
                    <h2><u>Queue</u></h2>
                    <div class="queue-list">
                        <div class="add-song">
                            <%= link_to "Add Song", "/searchResult", :class => "btn btn-primary" %>
                        </div>
                        <div class="song-list"></div>
                    </div>
                </div>
            </div>
        </div>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
        <script src="https://sdk.scdn.co/spotify-player.js"></script>
        <script
        src="https://code.jquery.com/jquery-3.2.1.min.js"
        integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous"></script>
        <script>
          var getSongFunction = () => {
            $.ajax({
                url: "/playlist/get-json",
                type: "GET",
                success: function(data) {
                    var htmlString = "";

                    for (var i = 0; i < data.res.length; i++) {
                      var upVoteString = `(function(){handleUpVote(${data.res[i].id});})()`;
                      var downVoteString = `(function(){handleDownVote(${data.res[i].id});})()`;

                      var upVoteButton = `<button type="button" class="btn btn-success" onClick=${upVoteString}>Upvote</button>`;
                      var downVoteButton = `<button type="button" class="btn btn-danger" onClick=${downVoteString}>Downvote</button>`;
                      var voteCount = `<button type="button" class="btn btn-info">${data.res[i].vote_count}</button>`;

                      htmlString += `<div class="each-song"><div><h4>${data.res[i].name}</h4></div><div>${upVoteButton}${downVoteButton}${voteCount}</div></div>`;
                    }

                    $(".song-list").html(htmlString);
                }
            })
          }
        
          $(document).ready(function() {
            getSongFunction();
          })
        
          var newPlayer; 
          var currentState;
          var deviceId;
          var songHasEnded

          window.onSpotifyWebPlaybackSDKReady = () => {
            const token = '<%= @accessToken %>';

            const player = new Spotify.Player({
              name: 'Web Playback SDK Quick Start Player',
              getOAuthToken: cb => { cb(token); }
            });
      
            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });
      
            // Playback status updates
            // player.addListener('player_state_changed', state => { 
      
      
            //});
      
            //Song has song ended
            player.addListener('player_state_changed', (state) => {
              console.log(state);
                if (
                  this.state
                  && state.track_window.previous_tracks.find(x => x.id === state.track_window.current_track.id)
                  && !this.state.paused
                  && state.paused
                  ) {
                  songHasEnded = 1
                  console.log('Track ended');
                  <% songEnded(@trackId[1]) if @trackId != [] && @firstVisit == 1 %>
                  setTimeout(function(){  }, 3000);
                  //this.setTrackEnd(true);
                  <% @trackId = fetchNewSong() %>
                  <% @firstVisit = 1 %>
                  $.ajax({
                    url: "https://api.spotify.com/v1/me/player/play?device_id=" + deviceId,
                    type: "PUT",
                    data: '{"uris": ["spotify:track:<%= @trackId[0]%>"]}',
                    beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + '<%= @accessToken %>' );},
                    success: function(data) { 
                      console.log(data)
                    }
                  });
        
                }
                this.state = state;
                console.log('track has not ended')
                songHasEnded = 0
              });


      
            // Ready
            player.addListener('ready', ({ device_id }) => {
              deviceId = device_id
              console.log('Ready with Device ID', device_id);
            });
      
            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
              console.log('Device ID has gone offline', device_id);
            });
      
            // Connect to the player!
            player.connect();
            player.getCurrentState().then(state => {
              if (!state) {
                console.error('User is not playing music through the Web Playback SDK');
                return;
              }
            });
      
            newPlayer = player
          };
      
          function togglePlay() {
              console.log(currentState)
                newPlayer.getCurrentState().then(state => {
                  console.log(state)
                  if (!state) {
                    $.ajax({
                      url: "https://api.spotify.com/v1/me/player/play?device_id=" + deviceId,
                      type: "PUT",
                      data: '{"uris": ["spotify:track:<%= @trackId[0] %>"]}',
                      beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + '<%= @accessToken %>' );},
                      success: function(data) { 
                        console.log(data)
                      }
                    });
                  } else {
                    newPlayer.togglePlay()
                  }
      
                });
      
                
            }
            var handleUpVote = s_id => {
                console.log(s_id);

                $.ajaxSetup({
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                })

                $.ajax({
                    url: `/song/up-vote?s_id=${s_id}`,
                    type: "POST",
                    success: function(data) {
                        console.log("Upvote request successfully made!");
                        getSongFunction();
                    }
                })
            }

            var handleDownVote = s_id => {
                console.log(s_id);

                $.ajaxSetup({
                    headers: {
                        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
                    }
                })

                $.ajax({
                    url: `/song/down-vote?s_id=${s_id}`,
                    type: "POST",
                    success: function(data) {
                        console.log("Downvote request successfully made!");
                        getSongFunction();
                    }
                })
            }
        </script>
    </body>
</html>


<!DOCTYPE html>
<html>
<head>
  <title>Spotify Web Playback SDK Quick Start Tutorial</title>
</head>
<body>







</body>
</html>